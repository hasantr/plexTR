import re

####################################################################################################
def MetadataObjectForURL(url):

	title = 'deneme'
	return VideoClipObject(
		title = title
	)

####################################################################################################
def MediaObjectsForURL(url):

	# If a live channel has been specified, then we should return a suitable webkit based MediaObject.
	# This is really only used by the actual plugin when dealing with Live channels.

	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution ='720',
			container = 'mp4',
			parts = [PartObject(key=Callback(PlayVideo, url = url, fmt='720'))]
		),
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution ='480',
			container = 'mp4',
			parts = [PartObject(key=Callback(PlayVideo, url = url, fmt='480'))]
		),
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution ='360',
			container = 'mp4',
			parts = [PartObject(key=Callback(PlayVideo, url = url, fmt='360'))]
		),
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution ='240',
			container = 'mp4',
			parts = [PartObject(key=Callback(PlayVideo, url = url, fmt='240'))]
		)
                
	]

####################################################################################################
def PlayVideo(url, fmt):


	liste=[]
	fixed=''
	gecis=0
	#link=urllib2.urlopen(urllib2.Request(url)).read()
	link=HTTP.Request(url).content
	host=re.compile("host=([^\&]+)").findall(link)
	uid=re.compile("uid=([^\&]+)").findall(link)
	vtag=re.compile("vtag=([^\&]+)").findall(link)
	hd = re.compile("hd_def=([^\&]+)").findall(link)
	if not hd or hd[0]=="-1":
		hd = re.compile("hd=([^\&]+)").findall(link)
	flv = re.compile("no_flv=(.*?)&").findall(link)
	try:
		vkstream=host[0]+'u'+uid[0]+'/videos/' + vtag[0]
		x=(int(hd[0])+1)
	except:
		vkstream='http://cs12959v4.vk.me/u1181955/videos/89866a2499'
	if hd >0 or flv == 1:
		if x==4:
		    a='.720'
		elif x==3:
		    a='.480'
		elif x==2:
		    a='.360'
		else:
		    a='.240'
		url=vkstream+a+'.mp4'



	# page = HTTP.Request(url).content

	# The source of the page actually contains a link to the associated flv file. We can simply find
	# this by using a regular expression to find it. Then, we just redirect.
	#video_url = 'http://cs12959v4.vk.me/u1181955/videos/f19b15cf33.360.mp4'

	return Redirect(url)

